{% for import in imports %}
{{import}}
{% endblock %}

{% for type in types %}
export interface {{type.name}}Visitor<R> {
  {% for node in nodes %}
  visit{{node.name}}{{type.name}}(node: {{type.name}}: R;
  {% endblock %}
}

export abstract class {{type.name}} {
  abstract accept<R>(visitor: {{type.name}}Visitor<R>): R;
}

{% for node in nodes %}
type.name, node.name, node.fields

class {{node.name}} extends {{type.name}} {
  constructor({{node.fields}}) {
    super();
  }

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit${node.name}${type.name}(this);
  }
}
{% endblock %}
{% endblock %}
